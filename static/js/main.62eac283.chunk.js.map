{"version":3,"sources":["Components/bhup.JPG","Components/navbar.jsx","utils/httpService.js","Components/user.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","state","Fragment","className","NavLink","to","Component","axios","interceptors","response","use","error","status","toast","Promise","reject","get","put","delete","post","user","posts","fetchState","fetchData","a","console","clear","http","config","urlEndpoint","data","setState","handleAdd","obj","title","body","log","handleUpdate","id","index","indexOf","handleDelete","filter","p","src","Bhup","alt","onClick","this","map","key","App","Switch","Route","exact","path","component","User","Redirect","from","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+LAAAA,EAAOC,QAAU,IAA0B,kC,uMCiC5BC,E,4MA9BbC,MAAQ,G,uDAEN,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,yBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,iBACb,kBAACC,EAAA,EAAD,CAASD,UAAU,eAAeE,GAAG,KAArC,eAEF,wBAAIF,UAAU,kBACZ,4BACE,kBAACC,EAAA,EAAD,CAASC,GAAG,WAAZ,SAEF,4BACA,kBAACD,EAAA,EAAD,CAASC,GAAG,SAAZ,SAEA,4BACA,kBAACD,EAAA,EAAD,CAASC,GAAG,UAAZ,UAEA,4BACA,kBAACD,EAAA,EAAD,CAASC,GAAG,YAAZ,oB,GArBOC,a,yECsBrBC,IAAMC,aAAaC,SAASC,IAAI,MAAM,SAAAC,GAUlC,OANsBA,EAAMF,UAAYE,EAAMF,SAASG,QAAU,KAAOD,EAAMF,SAASG,OAAO,IAE5FC,QAAMF,MAAM,0BAEVE,gBAAM,oBAEFC,QAAQC,OAAOJ,MAIZ,OACXK,IAAKT,IAAMS,IACXC,IAAKV,IAAMU,IACXC,OAAQX,IAAMW,OACdC,KAAMZ,IAAMY,M,iBC+EDC,G,kNAjHXnB,MAAQ,CACJoB,MAAO,GACPC,YAAY,G,EAGfC,U,sBAAW,8BAAAC,EAAA,6DAERC,QAAQC,QAFA,SAGsBC,EAAKX,IAAIY,EAAOC,aAHtC,gBAGMR,EAHN,EAGAS,KAMR,EAAKC,SAAS,CAAEV,QAAMC,YAAY,IAT1B,2C,EAcVU,U,sBAAY,kCAAAR,EAAA,6DACJS,EAAM,CACVC,MAAO,iBACPC,KAAM,+BAHE,SAKiBR,EAAKR,KAAKS,EAAOC,YAAYI,GAL9C,gBAKGd,EALH,EAKHW,KACPL,QAAQW,IAAIjB,GACNE,EAPI,CAOKF,GAPL,mBAOe,EAAKlB,MAAMoB,QAEpC,EAAKU,SAAS,CAACV,UATL,2C,EAYZgB,a,uCAAe,WAAOlB,GAAP,mBAAAK,EAAA,6DACbL,EAAKe,MAAQ,gBADA,SAESP,EAAKV,IAAIW,EAAOC,YAAY,IAAIV,EAAKmB,GAAKnB,GAFnD,kBAENW,KAEDT,EAJO,YAIK,EAAKpB,MAAMoB,OACvBkB,EAAQlB,EAAMmB,QAAQrB,GAC5BM,QAAQW,IAAIf,EAAM,IAClBA,EAAMkB,GAAN,eAAmBpB,GACnB,EAAKY,SAAS,CAACV,UARF,4C,wDAWfoB,a,uCAAe,WAAOtB,GAAP,eAAAK,EAAA,+EAEQG,EAAKT,OAAO,4CAA+CC,EAAKmB,IAFxE,oEAWPjB,EAAQ,EAAKpB,MAAMoB,MAAMqB,QAAO,SAAAC,GAAC,OAAIA,EAAEL,KAAOnB,EAAKmB,MACzD,EAAKP,SAAS,CAACV,UAZF,yD,6GAeP,IAAD,OACL,OACI,kBAAC,IAAMnB,SAAP,KACA,yBAAKC,UAAU,aACX,8CACA,yBAAKyC,IAAKC,IAAMC,IAAI,eAExB,4BAAQ3C,UAAU,kBAAkB4C,QAASC,KAAKzB,WAAlD,eAGIE,QAAQW,IAAIY,KAAK/C,MAAMqB,YAI3B,kBAAC,iBAAD,MACA,4BAAQnB,UAAU,kBAAkB4C,QAASC,KAAKhB,WAAlD,QAGIgB,KAAK/C,MAAMqB,YAAc,2BAAOnB,UAAU,SAC5C,+BACE,4BACE,qCACA,sCACA,wCAGJ,+BACG6C,KAAK/C,MAAMoB,MAAM4B,KAAI,SAAC9B,GAAD,OACpB,wBAAI+B,IAAK/B,EAAKmB,IACZ,4BAAKnB,EAAKe,OACV,4BACE,4BACE/B,UAAU,sBACV4C,QAAS,kBAAM,EAAKV,aAAalB,KAFnC,WAOF,4BACE,4BACEhB,UAAU,wBACV4C,QAAS,kBAAM,EAAKN,aAAatB,KAFnC,sB,GAjGHb,c,wBCgBJ6C,G,kNAdblD,MAAQ,G,uDAEN,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAACkD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAWC,IACrC,kBAACC,EAAA,EAAD,CAAUC,KAAK,QAAQtD,GAAG,iB,GARlBC,c,QCIEsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR,kBAACC,EAAA,EAAD,KACA,kBAAC,EAAD,OAECC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjE,GACLc,QAAQd,MAAMA,EAAMkE,c","file":"static/js/main.62eac283.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bhup.58bb1ef1.JPG\";","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nclass Navbar extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <nav className=\"navbar navbar-default\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"navbar-header\">\r\n              <NavLink className=\"navbar-brand\" to=\"/\"> Our Store</NavLink>\r\n            </div>\r\n            <ul className=\"nav navbar-nav\">\r\n              <li>\r\n                <NavLink to=\"/navbar\">Home</NavLink>\r\n              </li>\r\n              <li>\r\n              <NavLink to=\"/user\">User</NavLink>\r\n              </li>\r\n              <li>\r\n              <NavLink to=\"/login\">Login</NavLink>\r\n              </li>\r\n              <li>\r\n              <NavLink to=\"/aboutus\">AboutUs</NavLink>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\n// Types of requests\r\n// CRUD application -> Create,Read, Update and Delete\r\n// POST Request -> Create resource\r\n// GET Request -> Fetching/Reading the resource\r\n// PUT([\r\n//   {'a' :'a'},\r\n//   {'b':'b'}\r\n// ]) / PATCH([{'a':'A'}]) -> Updating the resource\r\n// DELETE Request -> Deleteing a resource\r\n\r\n//AJAX Example\r\n// function loadDoc() {\r\n//   var xhttp = new XMLHttpRequest();\r\n//   xhttp.onreadystatechange = function() {\r\n//     if (this.readyState == 4 && this.status == 200) {\r\n//       console.log(this.responseText);\r\n//     }\r\n//   };\r\n//   xhttp.open(\"GET\", \"https://jsonplaceholder.typicode.com/posts\", true);\r\n//   xhttp.send();\r\n// }\r\n\r\naxios.interceptors.response.use(null, error => {\r\n    // console.log(\"Error log\",err);\r\n    // console.log(error);\r\n    \r\n    const expectedError = error.response && error.response.status >= 400 && error.response.status<500;\r\n    if(expectedError){\r\n      toast.error('Expected error occured');\r\n    }else{\r\n        toast(\"Unexpected Error\");\r\n    }\r\n    return  Promise.reject(error);\r\n});\r\n\r\n\r\nexport default {\r\n    get: axios.get,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n    post: axios.post\r\n}","import React, { Component } from 'react';\r\nimport {ToastContainer} from 'react-toastify';\r\nimport config from '../config/config.json';\r\nimport http from '../utils/httpService';\r\nimport Bhup from \"../Components/bhup.JPG\"\r\n\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nclass user extends Component {\r\n    state = {  \r\n        posts :[],\r\n        fetchState: false\r\n    }\r\n    \r\n     fetchData =async()=>{\r\n        // loadDoc();\r\n        console.clear();\r\n        const { data: posts } = await http.get(config.urlEndpoint);\r\n        // const { data: temp } = await http.get(\r\n        //   \"https://jsonplaceholder.typicode.com/todos/1\"\r\n        // );\r\n        // console.log(temp);\r\n        // // promise.then((response) => console.log(response.data));\r\n        this.setState({ posts,fetchState: true });\r\n        // console.log(response.data);\r\n      }\r\n    \r\n    \r\n      handleAdd = async () => {\r\n        const obj = {\r\n          title: \"learning react\",\r\n          body: \"React is easy to understand\",\r\n        };\r\n        const {data: post} = await http.post(config.urlEndpoint,obj);\r\n        console.log(post);\r\n        const posts = [post , ...this.state.posts];\r\n        \r\n        this.setState({posts});\r\n      };\r\n    \r\n      handleUpdate = async (post) => {\r\n        post.title = \"Updated title\";\r\n        const {data} =  await http.put(config.urlEndpoint+\"/\"+post.id , post);\r\n        \r\n        const posts = [...this.state.posts];\r\n        const index = posts.indexOf(post);\r\n        console.log(posts[0]);\r\n        posts[index] = {...post};\r\n        this.setState({posts});\r\n      };\r\n    \r\n      handleDelete = async (post) => {\r\n        try{\r\n          const temp = await http.delete(\"https://jsonplaceholder.typicode.com/pos\"+\"/\"+post.id);\r\n        }catch (err){\r\n          // console.log(err);\r\n          // if(err.response && err.response.status===404){\r\n          //   alert('page not found');\r\n          // }\r\n        }\r\n        \r\n        // console.log(temp);\r\n        const posts = this.state.posts.filter(p => p.id !== post.id);\r\n        this.setState({posts});\r\n      };\r\n    \r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n            <div className=\"container\">\r\n                <h1>Hello User!!!!</h1>\r\n                <img src={Bhup} alt=\"Bhupendra\"/>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={this.fetchData}> Fetch data\r\n            </button>\r\n            {\r\n                console.log(this.state.fetchState)\r\n            }\r\n            \r\n            \r\n            <ToastContainer />\r\n            <button className=\"btn btn-primary\" onClick={this.handleAdd}> Add\r\n            </button>\r\n            {\r\n                this.state.fetchState && <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Title</th>\r\n                  <th>Update</th>\r\n                  <th>Delete</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.posts.map((post) => (\r\n                  <tr key={post.id}>\r\n                    <td>{post.title}</td>\r\n                    <td>\r\n                      <button\r\n                        className=\"btn btn-info btn-sm\"\r\n                        onClick={() => this.handleUpdate(post)}\r\n                      >\r\n                        Update\r\n                      </button>\r\n                    </td>\r\n                    <td>\r\n                      <button\r\n                        className=\"btn btn-danger btn-sm\"\r\n                        onClick={() => this.handleDelete(post)}\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n    }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n \r\nexport default user;","import React, { Component } from 'react';\n\nimport Navbar from './Components/navbar';\nimport User from './Components/user';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {  }\n  render() { \n    return ( \n      <React.Fragment>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/user\" component={User}  />\n          <Redirect from=\"/user\" to=\"navbar\" />\n        </Switch>\n      </React.Fragment>\n     );\n  }\n}\n \nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n <BrowserRouter>\n <App />\n </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}